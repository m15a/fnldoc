;; -*- mode: fennel; -*- vi:ft=fennel
;; Configuration file for Fnldoc 1.0.2-dev
;; https://sr.ht/~m15a/fnldoc/

{:fennel-path {}
 :function-signatures true
 :ignored-args-patterns ["%.%.%." "%_" "%_[^%s]+"]
 :inline-references "link"
 :insert-comment true
 :insert-copyright true
 :insert-license true
 :insert-version true
 :mode "checkdoc"
 :modules-info
 {:src/fnldoc.fnl
  {:description "Fnldoc - generate documentation for Fennel projects.

Generates documentation for Fennel libraries by analyzing project
metadata at runtime.

**Documentation for other modules**

- [fnldoc/console.fnl](./fnldoc/console.md) - Utilities to print messages to console.
- [fnldoc/config.fnl](./fnldoc/config.md) - Processes configuration file.
- [fnldoc/parser.fnl](./fnldoc/parser.md) - Loads the file and analyzes its metadata providing `module-info`.
- [fnldoc/markdown.fnl](./fnldoc/markdown.md) - Generates Markdown from `module-info`.
- [fnldoc/argparse.fnl](./fnldoc/argparse.md) - Functions for processing command line arguments.
- [fnldoc/argparse/cooker.fnl](./fnldoc/argparse/cooker.md) - Macros that help command line argument processing.
- [fnldoc/doctest.fnl](./fnldoc/doctest.md) - Documentation testing.
- [fnldoc/writer.fnl](./fnldoc/writer.md) - Writing markdown into files.
- [fnldoc/utils.fnl](./fnldoc/utils.md) - Miscellaneous utilities."}
  :src/fnldoc/argparse/cooker.fnl
  {:description "Generate command line argument flag recipes.

Macros defined here generate a table that maps command line argument flag
to its *recipe*, which will be used later in command line argument parsing.

You can generate flag recipes by

```fennel
(cooking
  (recipe :boolean :ramen
    \"Whether you like to have ramen noodles\")
  (recipe :category :taste :t [:shoyu :miso :tonkotsu]
    \"Which type of ramen you like to have\")
  (recipe :number :bowls :n :NUM
    \"How many ramen bowls you like to have\"))
```

which yields

```fennel
{:--ramen {:description \"--[no-]ramen\\tWhether you like to have ramen noodles\"
           :key \"ramen?\"
           :value true}
 :--no-ramen {:key \"ramen?\"
              :value false}
 :--taste {:description \"-t, --taste [shoyu|miso|tonkotsu]\\tWhich type of ramen you like to have (default: nil)\"
           :key \"taste\"
           :validate #<function: 0x7ffa16ead208>
           :consume-next? true}
 :-t {:key \"taste\"
      :validate #<function: 0x7ffa16e31310>
      :consume-next? true}
 :--bowls {:description \"-n, --bowls NUM\\tHow many ramen bowls you like to have (default: nil)\"
           :key \"bowls\"
           :preprocess #<function: builtin#17>
           :validate #<function: 0x7ffa16f984e8>
           :consume-next? true}
 :-n {:key \"bowls\"
      :preprocess #<function: builtin#17>
      :validate #<function: 0x7ffa16de4a98>
      :consume-next? true}}
```

It gives you no dishes, only recipes, unfortunately.

A recipe is a table that possibly contains the following entries depending on the needs.

- `:key`: The corresponding key in the `config` object, i.e., `.fenneldoc`.
- `:description`: a line that explain the flag, which will be shown in help.
- `:value`: If the flag is not nil, this value will be set; otherwise, the next command
  line argument will be set to the `:value`, possibly after doing `:preprocess` and
  `:validate`.
- `:preprocess`: A function that converts the next command line argument string to
  the `:value`. Only used for number flags.
- `:validate`: A function that checks if the `:value` is valid. This will be called
  after `:preprocess` is done. Only used for category and number flags."}}
 :order "alphabetic"
 :out-dir "./doc"
 :project-copyright "Copyright (C) 2020-2022 Andrey Listopadov, 2024 NACAMURA Mitsuhiro"
 :project-license "[MIT](https://git.sr.ht/~m15a/fnldoc/tree/main/item/LICENSE)"
 :project-version "1.0.2-dev"
 :sandbox true
 :test-requirements {}
 :toc true}
